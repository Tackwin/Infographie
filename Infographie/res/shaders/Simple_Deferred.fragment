#version 330 core
layout (location = 0) out vec3 gPosition;
layout (location = 1) out vec3 gNormal;
layout (location = 2) out vec4 gAlbedoSpec;

in vec2 TexCoords;
in vec3 FragPos;
in vec3 Normal;

uniform int use_alpha;
uniform float alpha_tolerance;

uniform sampler2D texture_main;
uniform sampler2D texture_alpha;
uniform sampler2D texture_specular;

void main() {
    vec4 alpha_sample = texture(texture_alpha, TexCoords);
    vec4 main_sample = texture(texture_main, TexCoords);

    float avg = (alpha_sample.r + alpha_sample.g + alpha_sample.b) / 3;
    //if (use_alpha == 1 && avg <= alpha_tolerance) discard;

    // store the fragment position vector in the first gbuffer texture
    gPosition = FragPos;
    // also store the per-fragment normals into the gbuffer
    gNormal = normalize(Normal);

    // and the diffuse per-fragment color
    gAlbedoSpec.rgba = main_sample.rgba;
    // store specular intensity in gAlbedoSpec's alpha component
    gAlbedoSpec.a = 1;
}