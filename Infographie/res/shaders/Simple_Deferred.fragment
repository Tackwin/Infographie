#version 330 core
layout (location = 0) out vec3 gPosition;
layout (location = 1) out vec3 gNormal;
layout (location = 2) out vec4 gAlbedoSpec;
layout (location = 3) out vec3 gMRA;

in vec2 TexCoords;
in vec3 FragPos;
in vec3 Normal;
in mat3 TBN;

uniform float alpha_tolerance;

uniform int use_plain_color;
uniform int use_alpha;
uniform int use_normal;
uniform int use_metallic;
uniform int use_roughness;
uniform int use_ao;

uniform sampler2D texture_main;
uniform sampler2D texture_alpha;
uniform sampler2D texture_specular;
uniform sampler2D texture_normal;
uniform sampler2D texture_metallic;
uniform sampler2D texture_roughness;
uniform sampler2D texture_ao;

uniform float metallic;
uniform float roughness;
uniform float ao;

uniform vec4 plain_color;

void main() {
    vec4 alpha_sample = texture(texture_alpha, TexCoords);
    vec4 main_sample = texture(texture_main, TexCoords);

    float avg = (alpha_sample.r + alpha_sample.g + alpha_sample.b) / 3;
    //if (use_alpha == 1 && avg <= alpha_tolerance) discard;

    // store the fragment position vector in the first gbuffer texture
    gPosition = FragPos;
    // also store the per-fragment normals into the gbuffer
    if (use_normal != 0){
    	gNormal = texture(texture_normal, TexCoords).rgb;
		gNormal = normalize(gNormal * 2.0 - 1.0);
		// Here we do left side multiplication (instead of left) because TBN is calculated in opengl-space
		// not application-space so we are in the right row/column major.
		gNormal = normalize(TBN * gNormal);
    } else {
    	gNormal = normalize(Normal);
    }

    // and the diffuse per-fragment color
    gAlbedoSpec.rgba = main_sample.rgba;
    // store specular intensity in gAlbedoSpec's alpha component
    gAlbedoSpec.a = 1;
    if (use_plain_color != 0) {
    	gAlbedoSpec = plain_color;
    }

    gMRA = vec3(metallic, roughness, ao);
    if (use_metallic != 0) {
    	gMRA.r = texture(texture_metallic, TexCoords).r;
    }
    if (use_roughness != 0) {
    	gMRA.g = texture(texture_roughness, TexCoords).r;
    }
    if (use_ao != 0) {
    	gMRA.b = texture(texture_ao, TexCoords).r;
    }

}