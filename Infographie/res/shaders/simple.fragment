#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;

// Values that stay constant for the whole mesh.
uniform sampler2D texture_main;
uniform sampler2D texture_alpha;

uniform int use_alpha;
uniform float alpha_tolerance;

out vec4 frag_color;
float near = 0.1; 
float far  = 5.0; 

float LinearizeDepth(float depth) {
    float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));	
}

void main() {             
    // float depth = LinearizeDepth(gl_FragCoord.z) / far; // divide by far for demonstration

    vec4 final_sample;
    vec4 alpha_sample = texture(texture_alpha, UV);
    vec4 main_sample = texture(texture_main, UV);

    float avg = (alpha_sample.r + alpha_sample.g + alpha_sample.b) / 3;
    if (use_alpha == 1 && avg <= alpha_tolerance) discard;

    final_sample.r = main_sample.r;
    final_sample.g = main_sample.g;
    final_sample.b = main_sample.b;
    final_sample.a = avg;
    if (use_alpha == 1) {
    	final_sample.a = avg;
    }
    else {
    	final_sample.a = main_sample.a;
    }

	frag_color = final_sample;
}