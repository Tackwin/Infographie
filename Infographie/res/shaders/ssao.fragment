#version 330 core
out float FragColor;

in vec2 TexCoords;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gMRA;
uniform sampler2D texNoise;

uniform vec3 samples[512];

uniform int kernelSize;
uniform float radius;
uniform float bias;

// tile noise texture over screen based on screen dimensions divided by noise size
uniform vec2 noiseScale; 

uniform mat4 projection;
uniform mat4 view;

uniform int debug;
const int Debug_Color = 0;
const int Debug_Normal = 1;
const int Debug_Pos = 2;
const int Debug_Rand = 3;
const int Debug_Depth = 4;

void main() {
    bool bypass_lighting = texture(gMRA, TexCoords).a < 0.0;

    // get input for SSAO algorithm
    vec3 fragPos = vec3(vec4(texture(gPosition, TexCoords).xyz, 1.0) * view);
    vec3 normal = normalize(texture(gNormal, TexCoords).rgb * mat3(view));
    vec3 randomVec = normalize(texture(texNoise, TexCoords * noiseScale).xyz);

    // create TBN change-of-basis matrix: from tangent-space to view-space
    vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
    vec3 bitangent = cross(normal, tangent);
    mat3 TBN = mat3(tangent, bitangent, normal);
    
    // iterate over the sample kernel and calculate occlusion factor
    float occlusion = 0.0;
    for(int i = 0; i < kernelSize; ++i) {
        // get sample position
        vec3 sample = TBN * samples[i]; // from tangent to view-space
        sample = fragPos + sample * radius; 
        
        // project sample position (to sample texture) (to get position on screen/texture)
        vec4 offset = vec4(sample, 1.0);
        offset = offset * projection; // from view to clip-space
        offset.xyz /= offset.w; // perspective divide
        offset.xyz = offset.xyz * 0.5 + 0.5; // transform to range 0.0 - 1.0
        
        // get sample depth
        float sampleDepth = (texture(gPosition, offset.xy) * view).z; // get depth value of kernel sample
        
        // range check & accumulate
        float rangeCheck = smoothstep(0.0, radius / abs(fragPos.z - sampleDepth), 1.0);
        occlusion += (sampleDepth >= sample.z + bias ? 1.0 : 0.0) * rangeCheck;           
    }
    occlusion = 1.0 - (occlusion / kernelSize);
    
    FragColor = occlusion;
    if (bypass_lighting) FragColor = 1.0;
}