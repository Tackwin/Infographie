#version 410 core
layout (triangles) in;
layout (triangle_strip, max_vertices = 3) out;

in Vertex_Data {
    vec2 uv;
} in_data[];

uniform float time;

layout (location = 0) in vec3 in_FragPos[];
layout (location = 1) in vec2 in_TexCoords[];
layout (location = 2) in vec3 in_Normal[];
layout (location = 3) in mat3 in_TBN[];

layout (location = 0) out vec3 out_FragPos;
layout (location = 1) out vec2 out_TexCoords;
layout (location = 2) out vec3 out_Normal;
layout (location = 3) out mat3 out_TBN;
layout (location = 6) flat out int out_Use_Lighting;

vec4 center() {
	return (gl_in[0].gl_Position + gl_in[1].gl_Position + gl_in[2].gl_Position) / 3;
}

void main() {
    vec4 c = center();
    float sin_time = sin(time * 2);
    sin_time = sin_time * sin_time;
    sin_time = 0.5 + 0.4 * sin_time;

    gl_Position = c + (gl_in[0].gl_Position - c) * sin_time;

    out_FragPos = in_FragPos[0];
	out_TexCoords = in_TexCoords[0];
	out_Normal = in_Normal[0];
	out_TBN = in_TBN[0];
	out_Use_Lighting = -1;

    EmitVertex();


    gl_Position = c + (gl_in[1].gl_Position - c) * sin_time;

    out_FragPos = in_FragPos[1];
	out_TexCoords = in_TexCoords[1];
	out_Normal = in_Normal[1];
	out_TBN = in_TBN[1];
	out_Use_Lighting = -1;

    EmitVertex();


    gl_Position = c + (gl_in[2].gl_Position - c) * sin_time;

    out_FragPos = in_FragPos[2];
	out_TexCoords = in_TexCoords[2];
	out_Normal = in_Normal[2];
	out_TBN = in_TBN[2];
	out_Use_Lighting = -1;

    EmitVertex();


    EndPrimitive();
}  