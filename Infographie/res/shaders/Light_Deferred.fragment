#version 330 core
const float PI = 3.14159265359;

out vec4 FragColor;

in vec2 TexCoords;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedoSpec;
uniform sampler2D gMRA;
uniform sampler2D gSSAO;

// IBL
uniform samplerCube irradianceMap;
uniform samplerCube prefilterMap;
uniform sampler2D brdfLUT;

uniform int use_ibl;

const int N_Light_Point = 4;
const int N_Light_Dir = 2;

struct Light_Point {
    vec3 Position;
    vec3 Color;
    
    float Strength;
    float Linear;
    float Quadratic;
};
uniform Light_Point light_points[N_Light_Point];

struct Light_Dir {
    vec3 dir;
    vec3 color;

    float strength;
};
uniform Light_Dir light_dirs[N_Light_Dir];

uniform vec3 view_pos;

uniform float ambient_strength;
uniform vec3 ambient_color;

uniform int show_debug;

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness);
vec3 fresnelSchlick(float cosTheta, vec3 F0);
float DistributionGGX(vec3 N, vec3 H, float roughness);
float GeometrySchlickGGX(float NdotV, float roughness);
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness);

void main() {             
    // retrieve data from gbuffer
    vec3 FragPos = texture(gPosition, TexCoords).rgb;
    vec3 Normal = texture(gNormal, TexCoords).rgb;
    vec3 Diffuse = texture(gAlbedoSpec, TexCoords).rgb;
    float metallic = texture(gMRA, TexCoords).r;
    float roughness = texture(gMRA, TexCoords).g;
    float ao = texture(gSSAO, TexCoords).r * texture(gMRA, TexCoords).b;
    float Specular = texture(gAlbedoSpec, TexCoords).a;
    bool bypass_lighting = texture(gMRA, TexCoords).a < 0.0;

    // If the normal is (0.0, 0.0, 0.0) that means it's an empty pixel.
    // so we just discard the pixel
    if (Normal == vec3(0, 0, 0)) { discard; }

    // then calculate lighting as usual
    vec3 lighting = vec3(0);
    vec3 viewDir = normalize(view_pos - FragPos);

    // calculate reflectance at normal incidence; if dia-electric (like plastic) use F0 
    // of 0.04 and if it's a metal, use the albedo color as F0 (metallic workflow)    
    vec3 F0 = vec3(0.04); 
    F0 = mix(F0, Diffuse, metallic);

    for(int i = 0; i < N_Light_Point; ++i) {
        vec3 lightDir = normalize(light_points[i].Position - FragPos);
        vec3 halfway = normalize(lightDir + viewDir);  
        float distance = length(light_points[i].Position - FragPos);
        float attenuation = light_points[i].Strength / (distance * distance);
        vec3 radiance = light_points[i].Color * attenuation;

        // Cook-Torrance BRDF
        float NDF = DistributionGGX(Normal, halfway, roughness);   
        float G   = GeometrySmith(Normal, viewDir, lightDir, roughness);      
        vec3 F    = fresnelSchlick(clamp(dot(halfway, viewDir), 0.0, 1.0), F0);
      
        vec3 nominator    = NDF * G * F; 
        float denominator = 4 * max(dot(Normal, viewDir), 0.0) * max(dot(Normal, lightDir), 0.0);
        vec3 specular = nominator / max(denominator, 0.001); // prevent divide by zero for NdotV=0.0 or NdotL=0.0


        // kS is equal to Fresnel
        vec3 kS = F;
        // for energy conservation, the diffuse and specular light can't
        // be above 1.0 (unless the surface emits light); to preserve this
        // relationship the diffuse component (kD) should equal 1.0 - kS.
        vec3 kD = vec3(1.0) - kS;
        // multiply kD by the inverse metalness such that only non-metals 
        // have diffuse lighting, or a linear blend if partly metal (pure metals
        // have no diffuse light).
        kD *= 1.0 - metallic;     

        // scale light by NdotL
        float NdotL = max(dot(Normal, lightDir), 0.0);  
        
        // add to outgoing radiance Lo
        lighting += (kD * Diffuse / PI + specular) * radiance * NdotL;

        // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
    }

    for (int i = 0; i < N_Light_Dir; ++i) {
        vec3 diffuse = max(dot(Normal, light_dirs[i].dir), 0.0) * Diffuse * light_dirs[i].color;
        
        // specular
        vec3 halfwayDir = normalize(light_dirs[i].dir + viewDir);  
        float spec = pow(max(dot(Normal, halfwayDir), 0.0), 16.0);
        vec3 specular = light_dirs[i].color * spec * Specular;
        
        lighting += (diffuse + specular) * light_dirs[i].strength;
    }

    vec2 brdf;
    vec3 prefilteredColor;
    vec3 specular;
    if (use_ibl != 0) {
        // ambient lighting (we now use IBL as the ambient term)
        vec3 F = fresnelSchlickRoughness(max(dot(Normal, viewDir), 0.0), F0, roughness);
        
        vec3 kS = F;
        vec3 kD = 1.0 - kS;
        kD *= 1.0 - metallic;     
        
        vec3 irradiance = texture(irradianceMap, Normal).rgb;
        vec3 diffuse = irradiance * Diffuse;

        
        // sample both the pre-filter map and the BRDF lut and combine them together as per the Split-Sum approximation to get the IBL specular part.
        const float MAX_REFLECTION_LOD = 4.0;
        prefilteredColor = textureLod(prefilterMap, reflect(viewDir, Normal), roughness * MAX_REFLECTION_LOD).rgb;    
        brdf = texture(brdfLUT, vec2(max(dot(Normal, viewDir), 0.0), roughness)).rg;
        specular = prefilteredColor * (F * brdf.x + brdf.y);

        vec3 ambient = kD * diffuse + specular;

        lighting += ambient * ambient_color * ambient_strength;
    } else {
        lighting += Diffuse * ambient_color * ambient_strength;
    }
    lighting *= ao;

    if (show_debug == 0){
        FragColor = vec4(lighting, 1.0);
        if (bypass_lighting) FragColor.rgb = Diffuse;
    }
    if (show_debug == 1){
        FragColor = vec4(FragPos, 1.0);
    }
    if (show_debug == 2){
        FragColor = vec4(Normal, 1.0);
    }
    if (show_debug == 3){
        FragColor = vec4(Diffuse, 1.0);
    }
    if (show_debug == 4){
        FragColor = vec4(metallic, roughness, ao, 1.0);
    }
    if (show_debug == 5){
        FragColor = vec4(brdf.r, brdf.g, ao, 1.0);
    }
    if (show_debug == 6){
        FragColor = vec4(prefilteredColor, 1.0);
    }
    if (show_debug == 7){
        FragColor = vec4(specular, 1.0);
    }
    if (show_debug == 8){
        FragColor = vec4(vec3(texture(gSSAO, TexCoords).r), 1.0);
    }
    if (show_debug == 9){
        FragColor = vec4(vec3(bypass_lighting ? 0.0 : 1.0), 1.0);
    }
    if (show_debug == 10){
        FragColor = vec4(vec3(metallic), 1.0);
    }
    if (show_debug == 11){
        FragColor = vec4(vec3(roughness), 1.0);
    }
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}
vec3 fresnelSchlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
} 
float DistributionGGX(vec3 N, vec3 H, float roughness) {
    float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
    
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
    
    return num / denom;
}
float GeometrySchlickGGX(float NdotV, float roughness) {
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
    
    return num / denom;
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);
    
    return ggx1 * ggx2;
}
