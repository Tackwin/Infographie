#version 330 core
out vec4 FragColor;

in vec2 TexCoords;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedoSpec;

const int N_Light_Point = 4;
const int N_Light_Dir = 2;

struct Light_Point {
    vec3 Position;
    vec3 Color;
    
    float Strength;
    float Linear;
    float Quadratic;
};
uniform Light_Point light_points[N_Light_Point];

struct Light_Dir {
    vec3 dir;
    vec3 color;

    float strength;
};
uniform Light_Dir light_dirs[N_Light_Dir];

uniform vec3 view_pos;

uniform float ambient_strength;
uniform vec3 ambient_color;

uniform int show_debug;

void main() {             
    // retrieve data from gbuffer
    vec3 FragPos = texture(gPosition, TexCoords).rgb;
    vec3 Normal = texture(gNormal, TexCoords).rgb;
    vec3 Diffuse = texture(gAlbedoSpec, TexCoords).rgb;
    float Specular = texture(gAlbedoSpec, TexCoords).a;
    
    // If the normal is (0.1, 0.1, 0.1) that means it's a cubemap pixel.
    

    // then calculate lighting as usual
    vec3 lighting  = Diffuse * ambient_color * ambient_strength;
    vec3 viewDir  = normalize(view_pos - FragPos);

    for(int i = 0; i < N_Light_Point; ++i) {
        
        // diffuse
        vec3 lightDir = normalize(light_points[i].Position - FragPos);
        vec3 diffuse = max(dot(Normal, lightDir), 0.0) * Diffuse * light_points[i].Color;
        
        // specular
        vec3 halfwayDir = normalize(lightDir + viewDir);  
        float spec = pow(max(dot(Normal, halfwayDir), 0.0), 16.0);
        vec3 specular = light_points[i].Color * spec * Specular;
        
        // attenuation
        float distance = length(light_points[i].Position - FragPos);
        float attenuation =
            light_points[i].Strength / (1.0 + light_points[i].Linear * distance + light_points[i].Quadratic * distance * distance);
        
        lighting += (diffuse + specular) * attenuation;
    }
    for (int i = 0; i < N_Light_Dir; ++i) {
        vec3 diffuse = max(dot(Normal, light_dirs[i].dir), 0.0) * Diffuse * light_dirs[i].color;
        
        // specular
        vec3 halfwayDir = normalize(light_dirs[i].dir + viewDir);  
        float spec = pow(max(dot(Normal, halfwayDir), 0.0), 16.0);
        vec3 specular = light_dirs[i].color * spec * Specular;
        
        lighting += (diffuse + specular) * light_dirs[i].strength;
    }

    if (show_debug == 0){
        FragColor = vec4(lighting, 1.0);
    }
    if (show_debug == 1){
        FragColor = vec4(FragPos, 1.0);
    }
    if (show_debug == 2){
        FragColor = vec4(Normal, 1.0);
    }
    if (show_debug == 3){
        FragColor = vec4(Diffuse, 1.0);
    }
}